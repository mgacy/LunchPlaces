name: Target Dependency Graph
description: Generate dependency graphs for targets within a Swift package.
inputs:
  features-directory:
    description: The directory to scan for target dependencies.
    required: true
    # default: Packages
  # json-output-path:
  #   description: The path, relative to `features-directory`, where the JSON definition of the package's target dependency graph will be written.
  #   required: false
  #   default: images/target-dependencies.json
  image-output-path:
    description: The path, relative to `features-directory`, where the package's target dependency graph will be written.
    required: false
    default: images/target-dependencies.svg

runs:
  using: composite
  steps:
    - name: Generate target depenency graphs
      id: generate-graphs
      shell: bash
      run: |
        # From: wakinchan/generate-target-dependencies.sh
        # https://gist.github.com/wakinchan/75bc1b75c812e432561a639566af518b
        packages=`swift package --package-path ${{ inputs.features-directory }} describe --type json`
        targets=`echo $packages | jq '.targets'`
        target_names=`echo $targets | jq -r '.[] | .name'`
        template=`cat <<EOF
        digraph DependenciesGraph {
        node [shape = box]
        %BODY%
        }
        `

        body=""
        for target_name in `echo $target_names`; do
          label='"'$target_name'" [label="'$target_name'"]'
          body+="$label\n"
          target_dependencies=`echo $targets | jq -r '.[] | select(.name == "'$target_name'") | select(.target_dependencies != null) | .target_dependencies | .[]'`
          for target_dependency in `echo $target_dependencies`; do
            target='"'$target_name'" -> "'$target_dependency'"'
            body+="$target\n"
          done
        done
        echo "$template" | sed -e 's/%BODY%/'"$body"'/' | dot -Tsvg -o ${{ inputs.features-directory }}/${{ inputs.image-output-path }}

        # NO_DEPENDENCY_MESSAGE="No external dependencies found"
        # for dir in ${{ inputs.package-directory }}/*/ ; do
        #   dot_file=$dir${{ inputs.dot-output-path }}
        #   echo "$dot_file"
        #   swift package --package-path $dir show-dependencies --format dot -o $dot_file
        #   if ! grep -q $NO_DEPENDENCY_MESSAGE $dot_file; then
        #     dot -Tsvg $dot_file > $dir${{ inputs.image-output-path }}
        #   fi
        # done
